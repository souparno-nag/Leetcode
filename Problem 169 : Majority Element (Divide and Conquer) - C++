class Solution {
public:
    int countInRange(vector<int>& nums, int target, int low, int high){
        int count = 0;
        for (int i = low; i <= high; i++){
            if (nums[i] == target){
                count++;
            }
        }
        return count;
    }
    int majorityElementsRec(vector<int>& nums, int low, int high){
        if (low >= high){
            return nums[low];
        }
        int mid = (low + high)/2;
        int leftMajority = majorityElementsRec(nums, low, mid);
        int rightMajority = majorityElementsRec(nums, mid+1, high);
        if (leftMajority == rightMajority){
            return leftMajority;
        }
        int leftCount = countInRange(nums, leftMajority, low, high);
        int rightCount = countInRange(nums, rightMajority, low, high);
        return (leftCount > rightCount) ? leftMajority : rightMajority;
    }
    int majorityElement(vector<int>& nums) {
        return majorityElementsRec(nums, 0, nums.size() - 1);
    }
};
